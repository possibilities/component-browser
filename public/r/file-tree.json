{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-tree",
  "type": "registry:ui",
  "title": "File Tree",
  "description": "A hierarchical file tree component with checkbox selection and folder expansion.",
  "dependencies": [
    "lucide-react",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "checkbox"
  ],
  "files": [
    {
      "path": "components/ui/file-tree.tsx",
      "content": "'use client'\n\nimport type React from 'react'\n\nimport { useEffect, useState } from 'react'\nimport { ChevronRight, File, Folder } from 'lucide-react'\nimport { Checkbox } from '@/components/ui/checkbox'\n\ntype FileTreeProps = {\n  files: string[]\n  selectedFiles: string[]\n  expandedFiles: string[]\n  onSelectionChange: (addedFiles: string[], removedFiles: string[]) => void\n  onExpansionChange: (\n    expandedFiles: string[],\n    contractedFiles: string[],\n  ) => void\n}\n\ntype TreeNode = {\n  path: string\n  isDir: boolean\n  children: TreeNode[]\n  parent: TreeNode | null\n  selected: boolean\n  indeterminate: boolean\n}\n\nfunction getNameFromPath(path: string): string {\n  if (!path) return 'root'\n  const segments = path.split('/')\n  return segments[segments.length - 1]\n}\n\nfunction updateSelectionsRecursively(node: TreeNode): {\n  selected: number\n  total: number\n} {\n  if (node.children.length === 0) {\n    return { selected: node.selected ? 1 : 0, total: 1 }\n  }\n\n  const counts = node.children.map(updateSelectionsRecursively)\n  const selectedCount = counts.reduce((sum, count) => sum + count.selected, 0)\n  const totalCount = counts.reduce((sum, count) => sum + count.total, 0)\n\n  node.selected = selectedCount === totalCount && totalCount > 0\n  node.indeterminate = selectedCount > 0 && selectedCount < totalCount\n  return { selected: selectedCount, total: totalCount }\n}\n\nfunction sortNodesFoldersFirst(node: TreeNode) {\n  node.children.sort((a, b) => {\n    if (a.isDir && !b.isDir) return -1\n    if (!a.isDir && b.isDir) return 1\n\n    return 0\n  })\n\n  node.children.forEach(sortNodesFoldersFirst)\n}\n\nfunction buildTree(files: string[], selectedFiles: string[]) {\n  const root: TreeNode = {\n    path: '',\n    isDir: true,\n    children: [],\n    parent: null,\n    selected: false,\n    indeterminate: false,\n  }\n\n  const nodeMap = new Map<string, TreeNode>()\n  nodeMap.set('', root)\n\n  const pathSet = new Set(files)\n\n  const sortedPaths = [...files].sort((a, b) => {\n    const aDepth = a.split('/').length\n    const bDepth = b.split('/').length\n    return aDepth - bDepth\n  })\n\n  sortedPaths.forEach(path => {\n    const isDir = files.some(\n      otherPath => otherPath !== path && otherPath.startsWith(path + '/'),\n    )\n\n    const isSelected = selectedFiles.includes(path)\n\n    const node: TreeNode = {\n      path,\n      isDir,\n      children: [],\n      parent: null,\n      selected: isSelected,\n      indeterminate: false,\n    }\n    nodeMap.set(path, node)\n\n    const segments = path.split('/')\n    segments.pop()\n    const parentPath = segments.join('/')\n\n    const parent = nodeMap.get(parentPath || '')\n    if (parent) {\n      node.parent = parent\n      parent.children.push(node)\n    } else {\n      let currentPath = ''\n      for (let i = 0; i < segments.length; i++) {\n        currentPath = segments.slice(0, i + 1).join('/')\n        if (!nodeMap.has(currentPath)) {\n          const intermediateNode: TreeNode = {\n            path: currentPath,\n            isDir: true,\n            children: [],\n            parent: nodeMap.get(segments.slice(0, i).join('/') || '') || root,\n            selected: false,\n            indeterminate: false,\n          }\n          nodeMap.set(currentPath, intermediateNode)\n          intermediateNode.parent!.children.push(intermediateNode)\n        }\n      }\n\n      const directParent = nodeMap.get(parentPath)\n      if (directParent) {\n        node.parent = directParent\n        directParent.children.push(node)\n      } else {\n        root.children.push(node)\n      }\n    }\n  })\n\n  return root\n}\n\nexport function FileTree({\n  files,\n  selectedFiles,\n  expandedFiles,\n  onSelectionChange,\n  onExpansionChange,\n}: FileTreeProps) {\n  const [tree, setTree] = useState<TreeNode | null>(null)\n\n  useEffect(() => {\n    const tree = buildTree(files, selectedFiles)\n    updateSelectionsRecursively(tree)\n    sortNodesFoldersFirst(tree)\n    setTree(tree)\n  }, [files, selectedFiles])\n\n  const toggleNode = (node: TreeNode) => {\n    const newSelected = node.indeterminate ? false : !node.selected\n\n    const updateSelection = (n: TreeNode) => {\n      n.selected = newSelected\n      n.indeterminate = false\n      n.children.forEach(updateSelection)\n    }\n\n    updateSelection(node)\n\n    let parent = node.parent\n    while (parent) {\n      const childStats = parent.children.reduce(\n        (stats, child) => ({\n          selected: stats.selected + (child.selected ? 1 : 0),\n          total: stats.total + 1,\n        }),\n        { selected: 0, total: 0 },\n      )\n\n      parent.selected = childStats.selected === childStats.total\n      parent.indeterminate =\n        childStats.selected > 0 && childStats.selected < childStats.total\n\n      parent = parent.parent\n    }\n\n    setTree({ ...tree! })\n\n    const currentSelectedFiles = getSelectedFiles(tree!)\n\n    const addedFiles = currentSelectedFiles.filter(\n      path => !selectedFiles.includes(path),\n    )\n\n    const removedFiles = selectedFiles.filter(\n      path => !currentSelectedFiles.includes(path),\n    )\n\n    if (addedFiles.length > 0 || removedFiles.length > 0) {\n      onSelectionChange(addedFiles, removedFiles)\n    }\n  }\n\n  const getSelectedFiles = (node: TreeNode): string[] => {\n    let selectedFiles: string[] = []\n\n    if (node.path && node.selected && !node.isDir) {\n      selectedFiles.push(node.path)\n    }\n\n    node.children.forEach(child => {\n      selectedFiles = selectedFiles.concat(getSelectedFiles(child))\n    })\n\n    return selectedFiles\n  }\n\n  const toggleFolderExpansion = (path: string, e: React.MouseEvent) => {\n    e.stopPropagation()\n\n    if (expandedFiles.includes(path)) {\n      onExpansionChange([], [path])\n    } else {\n      onExpansionChange([path], [])\n    }\n  }\n\n  const renderNode = (node: TreeNode, level = 0) => {\n    if (!node.path && level === 0) {\n      return (\n        <div className='space-y-1'>\n          {node.children.map(child => renderNode(child, level))}\n        </div>\n      )\n    }\n\n    const isExpanded = node.isDir ? expandedFiles.includes(node.path) : false\n\n    return (\n      <div key={node.path} className='select-none'>\n        <div\n          className={\n            'flex items-center py-1 px-1 rounded-md outline-none max-w-full'\n          }\n          tabIndex={0}\n        >\n          <div className='w-5 mr-1 flex-shrink-0 flex items-center justify-center'>\n            {node.isDir && (\n              <button\n                type='button'\n                className='w-5 h-5 flex items-center justify-center text-muted-foreground outline-none focus:outline-none'\n                aria-label={`Toggle ${getNameFromPath(node.path)}`}\n                onClick={e => toggleFolderExpansion(node.path, e)}\n              >\n                {node.children.length > 0 ? (\n                  <ChevronRight\n                    className={`h-4 w-4 ${isExpanded ? 'rotate-90' : ''}`}\n                  />\n                ) : (\n                  <ChevronRight className='h-4 w-4 opacity-0' />\n                )}\n              </button>\n            )}\n          </div>\n\n          <div className='flex items-center gap-3'>\n            <div className='w-5 flex-shrink-0 flex justify-center'>\n              <Checkbox\n                checked={node.selected}\n                indeterminate={node.indeterminate}\n                onChange={() => toggleNode(node)}\n              />\n            </div>\n\n            {node.isDir ? (\n              <Folder className='h-4 w-4 flex-shrink-0 text-muted-foreground' />\n            ) : (\n              <File className='h-4 w-4 flex-shrink-0 text-muted-foreground' />\n            )}\n            <span className='truncate'>{getNameFromPath(node.path)}</span>\n          </div>\n        </div>\n\n        {node.isDir && node.children.length > 0 && isExpanded && (\n          <div className='ml-4.75 space-y-1'>\n            {node.children.map(child => renderNode(child, level + 1))}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  if (!tree) {\n    return null\n  }\n\n  return renderNode(tree)\n}",
      "type": "registry:component",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {}
  },
  "cssVars": {}
}